// Minimum breakpoint width. Null for the smallest (first) breakpoint.
//
//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    576px
@function breakpoint-min($name, $breakpoints: $tztheme-grid-breakpoints) {
   $min: map-get($breakpoints, $name);
   @return if($min != 0, $min, null);
}

// Maximum breakpoint width.
// The maximum value is reduced by 0.02px to work around the limitations of
// `min-` and `max-` prefixes and viewports with fractional widths.
// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max
// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.
// See https://bugs.webkit.org/show_bug.cgi?id=178261
//
//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    767.98px
@function breakpoint-max($name, $breakpoints: $tztheme-grid-breakpoints) {
   $max: map-get($breakpoints, $name);
   @return if($max and $max > 0, $max - .02, null);
}

// Name of the next breakpoint, or null for the last breakpoint.
//
//    >> breakpoint-next(sm)
//    md
//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))
//    md
//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))
//    md
@function breakpoint-next($name, $breakpoints: $tztheme-grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
   $n: index($breakpoint-names, $name);
   @if not $n {
      @error "breakpoint `#{$name}` not found in `#{$breakpoints}`";
   }
   @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $tztheme-grid-breakpoints) {
   $min:  breakpoint-min($name, $breakpoints);
   $next: breakpoint-next($name, $breakpoints);
   $max:  breakpoint-max($next);

   @if $min != null and $max != null {
      @media (min-width: $min) and (max-width: $max) {
         @content;
      }
   } @else if $max == null {
      @include media-breakpoint-up($name, $breakpoints) {
         @content;
      }
   } @else if $min == null {
      @include media-breakpoint-down($next, $breakpoints) {
         @content;
      }
   }
}


// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $tztheme-grid-breakpoints) {
   $min: breakpoint-min($name, $breakpoints);
   @if $min {
      @media (min-width: $min) {
         @content;
      }
   } @else {
      @content;
   }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $tztheme-grid-breakpoints) {
   $max: breakpoint-max($name, $breakpoints);
   @if $max {
      @media (max-width: $max) {
         @content;
      }
   } @else {
      @content;
   }
}

// Helper function to replace negative values with 0
@function valid-radius($radius) {
   $return: ();
   @each $value in $radius {
      @if type-of($value) == number {
         $return: append($return, max($value, 0));
      } @else {
         $return: append($return, $value);
      }
   }
   @return $return;
}

// scss-docs-start border-radius-mixins
@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
   @if $tztheme-enable-rounded {
      border-radius: valid-radius($radius);
   }
   @else if $fallback-border-radius != false {
      border-radius: $fallback-border-radius;
   }
}

@mixin box-shadow($shadow...) {
   @if $tztheme-enable-shadows {
      $result: ();

      @each $value in $shadow {
         @if $value != null {
            $result: append($result, $value, "comma");
         }
         @if $value == none and length($shadow) > 1 {
            @warn "The keyword 'none' must be used as a single argument.";
         }
      }

      @if (length($result) > 0) {
         box-shadow: $result;
      }
   }
}
@mixin transition($transition...) {
   -webkit-transition: $transition;
   -moz-transition: $transition;
   -ms-transition: $transition;
   -o-transition: $transition;
   transition: $transition;
}
@mixin tz-loading($top,$bottom,$bg) {
   .templaza-posts__loading{
      background:$bg;
      position: absolute;
      top: $top;
      left: 0;
      bottom: $bottom;
      right: 0;
      z-index: 998;
      display: none;
      text-align: center;
      width:100%;
      margin:0 !important;
      padding-top:40px;

      .templaza-loading{
         position: absolute;
         left: 50%;
         transform: translateX(-50%);
      }
      &.show{
         display: block;
      }
   }
}
